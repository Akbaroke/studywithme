"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const user_controller_1 = require("../controller/user-controller");
const auth_middleware_1 = require("../middleware/auth-middleware");
const role_middleware_1 = require("../middleware/role-middleware");
const client_1 = require("@prisma/client");
const category_controller_1 = require("../controller/category-controller");
const content_controller_1 = require("../controller/content-controller");
const detail_content_controller_1 = require("../controller/detail-content-controller");
const question_controller_1 = require("../controller/question-controller");
const history_question_controller_1 = require("../controller/history-question-controller");
const discussion_controller_1 = require("../controller/discussion-controller");
const manage_user_controller_1 = require("../controller/manage-user-controller");
const apiRouter = express_1.default.Router();
apiRouter.use(auth_middleware_1.authMiddleware);
apiRouter.get('/api/users/current', user_controller_1.UserController.get);
apiRouter.patch('/api/users/current', user_controller_1.UserController.update);
apiRouter.delete('/api/users/current', user_controller_1.UserController.logout);
apiRouter.post('/api/categories', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), category_controller_1.CategoryController.create);
apiRouter.patch('/api/categories/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), category_controller_1.CategoryController.update);
apiRouter.delete('/api/categories/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), category_controller_1.CategoryController.delete);
apiRouter.post('/api/contents', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), content_controller_1.ContentController.create);
apiRouter.get('/api/contents/:id', content_controller_1.ContentController.getById);
apiRouter.patch('/api/contents/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), content_controller_1.ContentController.update);
apiRouter.delete('/api/contents/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), content_controller_1.ContentController.delete);
apiRouter.post('/api/detail-contents', detail_content_controller_1.DetailContentController.create);
apiRouter.get('/api/contents/detail-contents/:id', detail_content_controller_1.DetailContentController.getAllByContentId);
apiRouter.get('/api/detail-contents/:id', detail_content_controller_1.DetailContentController.getById);
apiRouter.patch('/api/detail-contents/:id', detail_content_controller_1.DetailContentController.update);
apiRouter.delete('/api/detail-contents/:id', detail_content_controller_1.DetailContentController.delete);
apiRouter.post('/api/questions', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), question_controller_1.QuestionController.create);
apiRouter.get('/api/questions', question_controller_1.QuestionController.getAll);
apiRouter.get('/api/questions/:id', question_controller_1.QuestionController.getById);
apiRouter.patch('/api/questions/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), question_controller_1.QuestionController.update);
apiRouter.delete('/api/questions/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN, client_1.Role.TEACHER]), question_controller_1.QuestionController.delete);
apiRouter.post('/api/history-question', history_question_controller_1.HistoryQuestionController.create);
apiRouter.get('/api/history-question', history_question_controller_1.HistoryQuestionController.getAll);
apiRouter.get('/api/history-question/:id', history_question_controller_1.HistoryQuestionController.getById);
apiRouter.put('/api/history-question/:id', history_question_controller_1.HistoryQuestionController.update);
apiRouter.delete('/api/history-question/:id', history_question_controller_1.HistoryQuestionController.delete);
apiRouter.post('/api/discussions', discussion_controller_1.DiscussionController.create);
apiRouter.get('/api/discussions/:id', discussion_controller_1.DiscussionController.getById);
apiRouter.put('/api/discussions/:id', discussion_controller_1.DiscussionController.update);
apiRouter.delete('/api/discussions/:id', discussion_controller_1.DiscussionController.delete);
apiRouter.patch('/api/manage-users/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN]), manage_user_controller_1.ManageUserController.updateUser);
apiRouter.get('/api/manage-users', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN]), manage_user_controller_1.ManageUserController.getAllUsers);
apiRouter.get('/api/manage-users/:id', (0, role_middleware_1.roleMiddleware)([client_1.Role.ADMIN]), manage_user_controller_1.ManageUserController.getUserById);
exports.default = apiRouter;
